{"version":3,"sources":["components/QrCodeCheckerPage/QrCodeCheckerPage.module.css","components/QrCodeCheckerPage/QrCodeChecker/QrCodeChecker.module.css","components/QrCodeCheckerPage/QrCodeChecker/QrCodeChecker.js","components/QrCodeCheckerPage/QrCodeCheckPage.js","components/QrCodeCheckerPage/QrCodeChecker/LegacyTest.js","components/quizpage/QuizPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","QrCodeChecker","state","result","handleScan","data","setState","console","log","document","location","handleError","err","error","className","Style_Sheet","QrReader","delay","onError","this","onScan","style","width","Component","QrCodeCheckPage","props","Main","ScanMsg","Button1","href","Button2","QuizPage","App","exact","path","component","QrCodeChekerPage","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,KAAO,gCAAgC,QAAU,mCAAmC,QAAU,mCAAmC,WAAa,sCAAsC,QAAU,mCAAmC,QAAU,qC,mBCA7PD,EAAOC,QAAU,CAAC,SAAW,kC,2PCqCdC,E,4MAhCXC,MAAQ,CACJC,OAAQ,a,EAGZC,WAAa,SAAAC,GACLA,IACA,EAAKC,SAAS,CACVH,OAAQE,IAEZE,QAAQC,IAAIH,GACZI,SAASC,SAAS,O,EAK1BC,YAAc,SAAAC,GACVL,QAAQM,MAAMD,I,uDAGd,OACI,yBAAKE,UAAWC,IAAYC,UACxB,kBAAC,IAAD,CACIC,MAAO,IACPC,QAASC,KAAKR,YACdS,OAAQD,KAAKf,WACbiB,MAAO,CAAEC,MAAO,e,GA1BRC,aCkBbC,EAnBS,SAACC,GAErB,OACI,yBAAKX,UAAWC,IAAYW,MACxB,yBAAKZ,UAAWC,IAAYY,SAA5B,kGACwB,6BADxB,qFAGA,kBAAC,EAAD,MACI,yBAAKb,UAAWC,IAAYa,SACxB,uBAAGC,KAAK,gBAAR,yKAEJ,iDACA,yBAAKf,UAAWC,IAAYe,SACxB,uBAAGD,KAAK,iBAAR,2H,UCdYN,Y,cCQjBQ,EATE,SAACN,GAEd,OACQ,+HACwB,6BADxB,sFCWGO,MATf,WACE,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,MAAMC,UAAWJ,IACnC,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAIC,UAAWC,MCCvBC,QACW,cAA7BC,OAAO5B,SAAS6B,UAEe,UAA7BD,OAAO5B,SAAS6B,UAEhBD,OAAO5B,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlC,SAASmC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLN,QAAQM,MAAMA,EAAMuC,c","file":"static/js/main.4584131d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"QrCodeCheckerPage_Main__1tFcr\",\"ScanMsg\":\"QrCodeCheckerPage_ScanMsg__2c7U2\",\"Borders\":\"QrCodeCheckerPage_Borders__2-UUC\",\"ButtonMenu\":\"QrCodeCheckerPage_ButtonMenu__vnIeI\",\"Button1\":\"QrCodeCheckerPage_Button1__4ckcR\",\"Button2\":\"QrCodeCheckerPage_Button2__1CfzI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"QrReader\":\"QrCodeChecker_QrReader__2HmmO\"};","import React, { Component } from 'react'\r\nimport QrReader from 'react-qr-reader'\r\nimport Style_Sheet from \"./QrCodeChecker.module.css\"\r\nimport { useHistory } from \"react-router\"\r\n\r\nclass QrCodeChecker extends Component {\r\n    state = {\r\n        result: 'No result'\r\n    }\r\n\r\n    handleScan = data => {\r\n        if (data) {\r\n            this.setState({\r\n                result: data,\r\n            })\r\n            console.log(data);\r\n            document.location='hi'\r\n        }\r\n        // eslint-disable-next-line no-restricted-globals\r\n\r\n    }\r\n    handleError = err => {\r\n        console.error(err)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={Style_Sheet.QrReader}>\r\n                <QrReader\r\n                    delay={300}\r\n                    onError={this.handleError}\r\n                    onScan={this.handleScan}\r\n                    style={{ width: '100%' }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QrCodeChecker;","import React from \"react\";\r\nimport Style_Sheet from \"./QrCodeCheckerPage.module.css\"\r\nimport QrCodeChecker from \"./QrCodeChecker/QrCodeChecker\";\r\n\r\nconst QrCodeCheckPage = (props) =>\r\n{\r\n    return(\r\n        <div className={Style_Sheet.Main}>\r\n            <div className={Style_Sheet.ScanMsg}>\r\n                Отсканируйте QR код <br></br> на вашем талоне\r\n            </div>\r\n            <QrCodeChecker/>\r\n                <div className={Style_Sheet.Button1}>\r\n                    <a href=\"QrError.html\">Разрешить использовать камеру</a>\r\n                </div>\r\n                <p>ИЛИ</p>\r\n                <div className={Style_Sheet.Button2}>\r\n                    <a href=\"Question.html\">Загрузить фото талона</a>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QrCodeCheckPage;","import React, { Component } from 'react'\r\nimport QrReader from 'react-qr-reader'\r\n\r\nclass LegacyModeExample extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            delay: 100,\r\n            result: 'No result',\r\n        }\r\n\r\n        this.handleScan = this.handleScan.bind(this)\r\n        this.openImageDialog = this.openImageDialog.bind(this)\r\n    }\r\n    handleScan(result){\r\n        if(result){\r\n            this.setState({ result })\r\n        }\r\n    }\r\n    handleError(err){\r\n        console.error(err)\r\n    }\r\n    openImageDialog() {\r\n        this.refs.qrReader1.openImageDialog()\r\n    }\r\n\r\n    render(){\r\n        const previewStyle = {\r\n            height: 240,\r\n            width: 320,\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <QrReader\r\n                    ref=\"qrReader1\"\r\n                    delay={this.state.delay}\r\n                    style={previewStyle}\r\n                    onError={this.handleError}\r\n                    onScan={this.handleScan}\r\n                    legacyMode\r\n                />\r\n                <input type=\"button\" value=\"Submit QR Code\" onClick={this.openImageDialog} />\r\n                <p>{this.state.result}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LegacyModeExample;","import React from \"react\";\r\n\r\nconst QuizPage = (props) =>\r\n{\r\n    return(\r\n            <div>\r\n                Отсканируйте QR код <br></br> на вашем талоне\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default QuizPage;","import React from 'react';\nimport './App.css';\nimport QrCodeChekerPage from \"./components/QrCodeCheckerPage/QrCodeCheckPage\"\nimport LegacyModeExample from \"./components/QrCodeCheckerPage/QrCodeChecker/LegacyTest\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport QuizPage from \"./components/quizpage/QuizPage\";\n\nfunction App() {\n  return (\n      <BrowserRouter>\n          <Route exact path='/hi' component={QuizPage}/>\n          <Route exact path='/' component={QrCodeChekerPage}/>\n      </BrowserRouter>\n      );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}